package public

import components "github.com/codinomello/weebie-go/web/components"

templ SignIn() {
    <html lang="pt-BR">
    <head>
        <!-- Meta Tags -->
        @components.Meta()
        <!-- T√≠tulo -->
        @components.Title("Weebie - Login")
        <!-- HTMX e Tailwind CSS -->
        @components.ScriptHead()
        <!-- Fonte -->
        @components.StyleHead()
        <!-- Flowbite CSS e √çcone -->
        @components.Link("house_with_garden.png")
        <!-- Firebase SDK -->
        <script type="module">
            import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
            import { 
                getAuth, 
                signInWithEmailAndPassword, 
                createUserWithEmailAndPassword, 
                GoogleAuthProvider, 
                GithubAuthProvider, 
                FacebookAuthProvider, 
                signInWithPopup, 
                linkWithCredential, 
                OAuthProvider,
                onAuthStateChanged
            } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js";

            // Configura√ß√£o do Firebase
            const firebaseConfig = {
                apiKey: "AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U",
                authDomain: "weebie-go.firebaseapp.com",
                projectId: "weebie-go",
                storageBucket: "weebie-go.appspot.com",
                messagingSenderId: "321509944065",
                appId: "1:321509944065:web:199a546b7055f461ec4900",
                measurementId: "G-S5CG0CLRVS"
            };

            // Debug flag - pode ser controlado por vari√°vel de ambiente
            const DEBUG_MODE = true;

            // Fun√ß√£o de debug personalizada
            function debugLog(message, data = null) {
                if (DEBUG_MODE) {
                    const timestamp = new Date().toISOString();
                    console.log(`[${timestamp}] üîç DEBUG:`, message);
                    if (data) {
                        console.log('üìã Data:', data);
                    }
                }
            }

            // Inicializa o Firebase
            debugLog('Inicializando Firebase App...');
            const app = initializeApp(firebaseConfig);
            const auth = getAuth(app);
            debugLog('Firebase inicializado com sucesso', { projectId: firebaseConfig.projectId });

            // Inicializa provedores
            const providers = {
                google: new GoogleAuthProvider(),
                github: new GithubAuthProvider(),
                facebook: new FacebookAuthProvider()
            };
            debugLog('Provedores de autentica√ß√£o inicializados', Object.keys(providers));

            // Monitor de estado de autentica√ß√£o
            onAuthStateChanged(auth, (user) => {
                if (user) {
                    debugLog('‚úÖ USU√ÅRIO LOGADO DETECTADO!', {
                        uid: user.uid,
                        email: user.email,
                        displayName: user.displayName,
                        emailVerified: user.emailVerified,
                        providerData: user.providerData.map(p => ({
                            providerId: p.providerId,
                            uid: p.uid,
                            email: p.email
                        })),
                        metadata: {
                            creationTime: user.metadata.creationTime,
                            lastSignInTime: user.metadata.lastSignInTime
                        }
                    });
                    console.log('üéâ USU√ÅRIO AUTENTICADO COM SUCESSO!');
                } else {
                    debugLog('‚ùå Usu√°rio n√£o est√° logado');
                }
            });

            // Fun√ß√£o para lidar com login de provedores sociais
            async function handleProviderLogin(provider) {
                debugLog(`Iniciando login social com provedor: ${provider}`);
                
                try {
                    const providerInstance = providers[provider];
                    if (!providerInstance) {
                        throw new Error(`Provedor ${provider} n√£o suportado`);
                    }

                    debugLog('Abrindo popup de autentica√ß√£o...');
                    const result = await signInWithPopup(auth, providerInstance);
                    const user = result.user;
                    
                    debugLog('Popup de autentica√ß√£o conclu√≠do com sucesso', {
                        uid: user.uid,
                        email: user.email,
                        displayName: user.displayName
                    });

                    debugLog('Obtendo token de ID...');
                    const idToken = await user.getIdToken();
                    debugLog('Token de ID obtido com sucesso');

                    debugLog('üöÄ ENVIANDO DADOS PARA O BACKEND...', {
                        endpoint: '/api/auth/social',
                        provider: provider,
                        uid: user.uid,
                        email: user.email,
                        hasToken: !!idToken
                    });

                    const response = await fetch("/api/auth/social", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": `Bearer ${idToken}`
                        },
                        body: JSON.stringify({
                            id_token: idToken,
                            provider: provider,
                            uid: user.uid,
                            email: user.email,
                            name: user.displayName
                        })
                    });

                    debugLog('Resposta do backend recebida', {
                        status: response.status,
                        statusText: response.statusText,
                        ok: response.ok
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        debugLog('‚ùå Erro na resposta do backend', { error: errorText });
                        throw new Error(errorText);
                    }

                    const responseData = await response.json().catch(() => null);
                    debugLog('‚úÖ Backend processou login social com sucesso', responseData);

                    showMessage("Login social realizado com sucesso!", "success");
                    debugLog('Redirecionando para home em 2 segundos...');
                    setTimeout(() => {
                        debugLog('Redirecionando agora...');
                        window.location.href = "/";
                    }, 2000);

                } catch (error) {
                    debugLog('‚ùå ERRO NO LOGIN SOCIAL', {
                        code: error.code,
                        message: error.message,
                        stack: error.stack
                    });

                    if (error.code === "auth/account-exists-with-different-credential") {
                        debugLog('Detectado conflito de credenciais - salvando para vincula√ß√£o posterior');
                        
                        const pendingCred = OAuthProvider.credentialFromError(error);
                        localStorage.setItem("pendingCred", JSON.stringify(pendingCred));
                        localStorage.setItem("pendingProvider", provider);
                        
                        debugLog('Credenciais pendentes salvas no localStorage', {
                            provider: provider,
                            hasPendingCred: !!pendingCred
                        });

                        showMessage("Este e-mail j√° est√° registrado com outro m√©todo. Fa√ßa login com e-mail/senha para vincular sua conta.", "error");
                    } else {
                        showMessage(parseAuthError(error), "error");
                    }
                }
            }

            // Fun√ß√£o auxiliar para tratar erros de autentica√ß√£o
            function parseAuthError(error) {
                debugLog('Parseando erro de autentica√ß√£o', { code: error.code, message: error.message });
                
                if (error.code) {
                    switch (error.code) {
                        case "auth/email-already-in-use":
                            return "Este e-mail j√° est√° cadastrado.";
                        case "auth/invalid-email":
                            return "E-mail inv√°lido.";
                        case "auth/weak-password":
                            return "Senha muito fraca (m√≠nimo 6 caracteres).";
                        case "auth/popup-closed-by-user":
                            return "Login cancelado pelo usu√°rio.";
                        case "auth/wrong-password":
                            return "Senha incorreta.";
                        case "auth/user-not-found":
                            return "Usu√°rio n√£o encontrado.";
                        case "auth/too-many-requests":
                            return "Muitas tentativas. Tente novamente mais tarde.";
                        case "auth/popup-blocked":
                            return "Popup de login bloqueado pelo navegador.";
                        case "auth/account-exists-with-different-credential":
                            return "Este e-mail j√° est√° registrado com outro m√©todo. Fa√ßa login para vincular.";
                        case "auth/network-request-failed":
                            return "Erro de conex√£o. Verifique sua internet.";
                        case "auth/unauthorized-domain":
                            return "Dom√≠nio n√£o autorizado para autentica√ß√£o.";
                        default:
                            return `Erro: ${error.message}`;
                    }
                }
                return error.message || "Ocorreu um erro desconhecido.";
            }

            // Fun√ß√£o para exibir mensagens
            function showMessage(message, type) {
                debugLog(`Exibindo mensagem: ${type}`, { message });
                
                const authResult = document.getElementById("auth-result");
                if (!authResult) {
                    debugLog('‚ùå Elemento auth-result n√£o encontrado no DOM');
                    return;
                }

                authResult.innerHTML = `
                    <div class="p-3 mb-4 text-sm rounded-lg ${
                        type === "success" 
                            ? "bg-green-100 text-green-700 dark:bg-green-200 dark:text-green-800" 
                            : "bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800"
                    }">
                        ${message}
                    </div>
                `;
                authResult.classList.remove("hidden");
                debugLog('Mensagem exibida com sucesso');
            }

            // Formul√°rio de login
            const signinForm = document.getElementById("email-signin-form");
            if (signinForm) {
                debugLog('Formul√°rio de login encontrado - configurando event listener');
                
                signinForm.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    debugLog('Formul√°rio de login submetido');

                    const formData = new FormData(signinForm);
                    const userData = Object.fromEntries(formData.entries());
                    
                    debugLog('Dados do formul√°rio coletados', {
                        email: userData.email,
                        hasPassword: !!userData.password
                    });

                    if (!userData.email || !userData.password) {
                        debugLog('‚ùå Valida√ß√£o falhou - campos obrigat√≥rios vazios');
                        showMessage("Por favor, preencha e-mail e senha", "error");
                        return;
                    }

                    try {
                        debugLog('Tentando autentica√ß√£o com email/senha no Firebase...');
                        const userCredential = await signInWithEmailAndPassword(auth, userData.email, userData.password);
                        
                        debugLog('‚úÖ Autentica√ß√£o Firebase bem-sucedida', {
                            uid: userCredential.user.uid,
                            email: userCredential.user.email
                        });

                        const idToken = await userCredential.user.getIdToken();
                        debugLog('Token de ID obtido para login por email');

                        // Verifica se h√° uma credencial pendente para vincula√ß√£o
                        const pendingCred = localStorage.getItem("pendingCred");
                        const pendingProvider = localStorage.getItem("pendingProvider");

                        if (pendingCred && pendingProvider) {
                            debugLog('Detectadas credenciais pendentes - iniciando vincula√ß√£o', {
                                provider: pendingProvider
                            });

                            try {
                                const credential = JSON.parse(pendingCred);
                                await linkWithCredential(userCredential.user, OAuthProvider.credentialFromJSON(credential));
                                
                                debugLog('‚úÖ Vincula√ß√£o de credenciais bem-sucedida');
                                
                                // Limpa credenciais pendentes
                                localStorage.removeItem("pendingCred");
                                localStorage.removeItem("pendingProvider");

                                debugLog('Enviando dados de vincula√ß√£o para o backend...');
                                const response = await fetch("/api/auth/social-login", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        "Authorization": `Bearer ${idToken}`
                                    },
                                    body: JSON.stringify({
                                        id_token: idToken,
                                        provider: pendingProvider,
                                        uid: userCredential.user.uid,
                                        email: userCredential.user.email,
                                        name: userCredential.user.displayName
                                    })
                                });

                                if (!response.ok) {
                                    throw new Error(await response.text());
                                }

                                debugLog('‚úÖ Vincula√ß√£o processada pelo backend com sucesso');
                                showMessage("Conta vinculada com sucesso!", "success");
                                setTimeout(() => {
                                    debugLog('Redirecionando ap√≥s vincula√ß√£o...');
                                    window.location.href = "/";
                                }, 2000);
                                return;

                            } catch (linkError) {
                                debugLog('‚ùå Erro na vincula√ß√£o de credenciais', linkError);
                                // Continue com login normal se a vincula√ß√£o falhar
                            }
                        }

                        // Login normal
                        debugLog('Processando login normal no backend...');
                        const response = await fetch("/api/auth/login", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": `Bearer ${idToken}`
                            },
                            body: JSON.stringify({
                                id_token: idToken,
                                uid: userCredential.user.uid
                            })
                        });

                        debugLog('Resposta do backend para login normal', {
                            status: response.status,
                            ok: response.ok
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            debugLog('‚ùå Erro no backend durante login normal', { error: errorText });
                            throw new Error(errorText);
                        }

                        debugLog('‚úÖ Login normal processado com sucesso pelo backend');
                        showMessage("Login realizado com sucesso!", "success");
                        setTimeout(() => {
                            debugLog('Redirecionando para home...');
                            window.location.href = "/";
                        }, 2000);

                    } catch (error) {
                        debugLog('‚ùå ERRO GERAL NO LOGIN POR EMAIL', {
                            code: error.code,
                            message: error.message,
                            stack: error.stack
                        });
                        showMessage(parseAuthError(error), "error");
                    }
                });
            } else {
                debugLog('‚ùå Formul√°rio de login n√£o encontrado no DOM');
            }

            // Expor fun√ß√µes globalmente
            window.handleProviderLogin = handleProviderLogin;
            
            // Expor fun√ß√£o de debug para uso manual no console
            window.debugAuth = {
                getCurrentUser: () => auth.currentUser,
                getDebugInfo: () => ({
                    isLoggedIn: !!auth.currentUser,
                    user: auth.currentUser,
                    providers: Object.keys(providers),
                    debugMode: DEBUG_MODE
                }),
                toggleDebug: () => {
                    window.DEBUG_MODE = !DEBUG_MODE;
                    debugLog(`Debug mode ${DEBUG_MODE ? 'ativado' : 'desativado'}`);
                }
            };

            debugLog('üöÄ Sistema de autentica√ß√£o inicializado completamente');
            debugLog('üí° Use window.debugAuth no console para fun√ß√µes de debug');
        </script>
    </head>
    <body class="bg-gray-100 dark:bg-gray-900">
        <!-- Header -->
        @components.Nav("Iniciar sess√£o", "email.png")
        <!-- Formul√°rio de Login -->
        <main class="flex-grow flex items-center justify-center p-4 pt-8">
            <div class="w-full max-w-lg mx-auto">
                <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-xl">
                    <div class="text-center mb-6">
                        <h2 class="text-3xl font-bold text-orange dark:text-golden mb-2">üìé Acesse a sua conta</h2>
                        <p class="text-gray-600 dark:text-gray-300">Fa√ßa login para acessar sua conta</p>
                    </div>
                    <!-- Formul√°rio -->
                    <form id="email-signin-form" class="space-y-4">
                        <!-- E-mail -->
                        <div class="space-y-2">
                            <label for="email" class="block text-base font-medium text-gray-700 dark:text-gray-300">E-mail <span class="text-golden">*</span></label>
                            <input id="email" name="email" type="email" required
                                   class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-orange focus:border-transparent transition">
                        </div>

                        <!-- Senha -->
                        <div class="space-y-2">
                            <label for="password" class="block text-base font-medium text-gray-700 dark:text-gray-300">Senha <span class="text-golden">*</span></label>
                            <input id="password" name="password" type="password" required
                                   class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-orange focus:border-transparent transition">
                            <div class="flex justify-end pt-1">
                                <a href="/forgot-password" class="text-sm text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">Esqueceu a senha?</a>
                            </div>
                        </div>

                        <!-- Resultado da Autentica√ß√£o -->
                        <div id="auth-result" class="hidden"></div>

                        <!-- Bot√£o de A√ß√£o -->
                        <button type="submit" 
                            class="w-full mt-8 px-4 py-3 text-lg bg-gradient-to-r from-orange to-golden text-white font-semibold rounded-lg hover:opacity-90 transition-all duration-300 transform hover:scale-[1.02] shadow-md">
                            Entrar
                        </button>
                    </form>

                    <!-- Divisor -->
                    <div class="flex items-center my-6">
                        <div class="flex-1 h-px bg-gray-300 dark:bg-gray-600"></div>
                        <span class="px-4 text-md text-gray-600 dark:text-gray-300">ou</span>
                        <div class="flex-1 h-px bg-gray-300 dark:bg-gray-600"></div>
                    </div>

                    <!-- Bot√µes de OAuth2 -->
                    <div class="space-y-3">
                        <button id="google-signin" onclick="handleProviderLogin('google')" class="w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]">
                            <img src="https://www.google.com/favicon.ico" alt="Google" class="w-5 h-5 mr-2">
                            <span class="text-md font-medium text-gray-700 dark:text-gray-300">Continuar com Google</span>
                        </button>
                        <button id="github-signin" onclick="handleProviderLogin('github')" class="w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]">
                            <img src="https://github.com/favicon.ico" alt="GitHub" class="w-5 h-5 mr-2">
                            <span class="text-md font-medium text-gray-700 dark:text-gray-300">Continuar com GitHub</span>
                        </button>
                        <button id="facebook-signin" onclick="handleProviderLogin('facebook')" class="w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]">
                            <img src="https://www.facebook.com/favicon.ico" alt="Facebook" class="w-5 h-5 mr-2">
                            <span class="text-md font-medium text-gray-700 dark:text-gray-300">Continuar com Facebook</span>
                        </button>
                    </div>

                    <!-- Link para Cadastro -->
                    <div class="mt-6 text-center">
                        <p class="text-base text-gray-600 dark:text-gray-300">
                            N√£o tem uma conta? 
                            <a href="/signup" class="text-orange font-medium hover:underline dark:text-golden">Cadastre-se</a>
                        </p>
                    </div>
                </div>
            </div>
        </main>
        <!-- Rodap√© -->
        @components.FooterLogin()
        <!-- Anima√ß√£o de Carregamento -->
        @components.ScriptAnimations()
    </body>
    </html>
}