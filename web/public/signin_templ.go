// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package public

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import components "github.com/codinomello/weebie-go/web/components"

func SignIn() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html lang=\"pt-BR\"><head><!-- Meta Tags -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Meta().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<!-- Título -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Title("Weebie - Login").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- HTMX e Tailwind CSS -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.ScriptHead().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<!-- Fonte -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.StyleHead().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Flowbite CSS e Ícone -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Link("house_with_garden.png").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Firebase SDK v11.8.1 --><script type=\"module\">\r\n            import { initializeApp } from \"https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js\";\r\n            import { \r\n                getAuth, \r\n                signInWithEmailAndPassword, \r\n                createUserWithEmailAndPassword, \r\n                GoogleAuthProvider, \r\n                GithubAuthProvider, \r\n                FacebookAuthProvider, \r\n                signInWithPopup, \r\n                linkWithCredential, \r\n                OAuthProvider \r\n            } from \"https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js\";\r\n\r\n            // Configuração do Firebase\r\n            const firebaseConfig = {\r\n                apiKey: \"AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U\",\r\n                authDomain: \"weebie-go.firebaseapp.com\",\r\n                projectId: \"weebie-go\",\r\n                storageBucket: \"weebie-go.appspot.com\",\r\n                messagingSenderId: \"321509944065\",\r\n                appId: \"1:321509944065:web:199a546b7055f461ec4900\",\r\n                measurementId: \"G-S5CG0CLRVS\"\r\n            };\r\n\r\n            // Inicializa o Firebase\r\n            const app = initializeApp(firebaseConfig);\r\n            const auth = getAuth(app);\r\n\r\n            // Inicializa provedores\r\n            const providers = {\r\n                google: new GoogleAuthProvider(),\r\n                github: new GithubAuthProvider(),\r\n                facebook: new FacebookAuthProvider()\r\n            };\r\n\r\n            // Função para lidar com login de provedores sociais\r\n            async function handleProviderLogin(provider) {\r\n                console.log(`Tentando login com provedor: ${provider}`);\r\n                try {\r\n                    const providerInstance = providers[provider];\r\n                    if (!providerInstance) {\r\n                        throw new Error(`Provedor ${provider} não suportado`);\r\n                    }\r\n\r\n                    const result = await signInWithPopup(auth, providerInstance);\r\n                    const user = result.user;\r\n                    const idToken = await user.getIdToken();\r\n\r\n                    console.log(\"Usuário autenticado:\", user.uid);\r\n\r\n                    const response = await fetch(\"/api/auth/social\", {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                            \"Authorization\": `Bearer ${idToken}`\r\n                        },\r\n                        body: JSON.stringify({\r\n                            id_token: idToken,\r\n                            provider: provider,\r\n                            uid: user.uid,\r\n                            email: user.email,\r\n                            name: user.displayName\r\n                        })\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(await response.text());\r\n                    }\r\n\r\n                    showMessage(\"Login social realizado com sucesso!\", \"success\");\r\n                    setTimeout(() => window.location.href = \"/\", 2000);\r\n                } catch (error) {\r\n                    console.error(\"Erro no login social:\", error);\r\n                    if (error.code === \"auth/account-exists-with-different-credential\") {\r\n                        const pendingCred = OAuthProvider.credentialFromError(error);\r\n                        showMessage(\"Este e-mail já está registrado com outro método. Faça login com e-mail/senha para vincular sua conta.\", \"error\");\r\n                        localStorage.setItem(\"pendingCred\", JSON.stringify(pendingCred));\r\n                        localStorage.setItem(\"pendingProvider\", provider);\r\n                    } else {\r\n                        showMessage(parseAuthError(error), \"error\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Função auxiliar para tratar erros de autenticação\r\n            function parseAuthError(error) {\r\n                if (error.code) {\r\n                    switch (error.code) {\r\n                        case \"auth/email-already-in-use\":\r\n                            return \"Este e-mail já está cadastrado.\";\r\n                        case \"auth/invalid-email\":\r\n                            return \"E-mail inválido.\";\r\n                        case \"auth/weak-password\":\r\n                            return \"Senha muito fraca (mínimo 6 caracteres).\";\r\n                        case \"auth/popup-closed-by-user\":\r\n                            return \"Login cancelado pelo usuário.\";\r\n                        case \"auth/wrong-password\":\r\n                            return \"Senha incorreta.\";\r\n                        case \"auth/user-not-found\":\r\n                            return \"Usuário não encontrado.\";\r\n                        case \"auth/too-many-requests\":\r\n                            return \"Muitas tentativas. Tente novamente mais tarde.\";\r\n                        case \"auth/popup-blocked\":\r\n                            return \"Popup de login bloqueado pelo navegador.\";\r\n                        case \"auth/account-exists-with-different-credential\":\r\n                            return \"Este e-mail já está registrado com outro método. Faça login para vincular.\";\r\n                        default:\r\n                            return `Erro: ${error.message}`;\r\n                    }\r\n                }\r\n                return error.message || \"Ocorreu um erro desconhecido.\";\r\n            }\r\n\r\n            // Função para exibir mensagens\r\n            function showMessage(message, type) {\r\n                const authResult = document.getElementById(\"auth-result\");\r\n                if (!authResult) return;\r\n\r\n                authResult.innerHTML = `\r\n                    <div class=\"p-3 mb-4 text-sm rounded-lg ${\r\n                        type === \"success\" \r\n                            ? \"bg-green-100 text-green-700 dark:bg-green-200 dark:text-green-800\" \r\n                            : \"bg-red-100 text-red-700 dark:bg-red-200 dark:text-red-800\"\r\n                    }\">\r\n                        ${message}\r\n                    </div>\r\n                `;\r\n                authResult.classList.remove(\"hidden\");\r\n            }\r\n\r\n            // Formulário de login\r\n            const signinForm = document.getElementById(\"email-signin-form\");\r\n            if (signinForm) {\r\n                signinForm.addEventListener(\"submit\", async (e) => {\r\n                    e.preventDefault();\r\n\r\n                    const formData = new FormData(signinForm);\r\n                    const userData = Object.fromEntries(formData.entries());\r\n\r\n                    if (!userData.email || !userData.password) {\r\n                        showMessage(\"Por favor, preencha e-mail e senha\", \"error\");\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        const userCredential = await signInWithEmailAndPassword(auth, userData.email, userData.password);\r\n                        const idToken = await userCredential.user.getIdToken();\r\n\r\n                        // Verifica se há uma credencial pendente para vinculação\r\n                        const pendingCred = localStorage.getItem(\"pendingCred\");\r\n                        const pendingProvider = localStorage.getItem(\"pendingProvider\");\r\n\r\n                        if (pendingCred && pendingProvider) {\r\n                            const credential = JSON.parse(pendingCred);\r\n                            await linkWithCredential(userCredential.user, OAuthProvider.credentialFromJSON(credential));\r\n                            localStorage.removeItem(\"pendingCred\");\r\n                            localStorage.removeItem(\"pendingProvider\");\r\n\r\n                            const response = await fetch(\"/api/auth/social-login\", {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\",\r\n                                    \"Authorization\": `Bearer ${idToken}`\r\n                                },\r\n                                body: JSON.stringify({\r\n                                    id_token: idToken,\r\n                                    provider: pendingProvider,\r\n                                    uid: userCredential.user.uid,\r\n                                    email: userCredential.user.email,\r\n                                    name: userCredential.user.displayName\r\n                                })\r\n                            });\r\n\r\n                            if (!response.ok) {\r\n                                throw new Error(await response.text());\r\n                            }\r\n\r\n                            showMessage(\"Conta vinculada com sucesso!\", \"success\");\r\n                            setTimeout(() => window.location.href = \"/\", 2000);\r\n                            return;\r\n                        }\r\n\r\n                        // Login normal\r\n                        const response = await fetch(\"/api/auth/login\", {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\",\r\n                                \"Authorization\": `Bearer ${idToken}`\r\n                            },\r\n                            body: JSON.stringify({\r\n                                id_token: idToken,\r\n                                uid: userCredential.user.uid\r\n                            })\r\n                        });\r\n\r\n                        if (!response.ok) {\r\n                            throw new Error(await response.text());\r\n                        }\r\n\r\n                        showMessage(\"Login realizado com sucesso!\", \"success\");\r\n                        setTimeout(() => window.location.href = \"/\", 2000);\r\n                    } catch (error) {\r\n                        console.error(\"Erro no login:\", error);\r\n                        showMessage(parseAuthError(error), \"error\");\r\n                    }\r\n                });\r\n            }\r\n            // Expor handleProviderLogin globalmente\r\n            window.handleProviderLogin = handleProviderLogin;\r\n        </script></head><body class=\"bg-gray-100 dark:bg-gray-900\"><!-- Header -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Nav("Iniciar sessão", "email.png").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<!-- Formulário de Login --><main class=\"flex-grow flex items-center justify-center p-4 pt-8\"><div class=\"w-full max-w-lg mx-auto\"><div class=\"bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-lg border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-xl\"><div class=\"text-center mb-6\"><h2 class=\"text-3xl font-bold text-orange dark:text-golden mb-2\">📎 Acesse a sua conta</h2><p class=\"text-gray-600 dark:text-gray-300\">Faça login para acessar sua conta</p></div><!-- Formulário --><form id=\"email-signin-form\" class=\"space-y-4\"><!-- E-mail --><div class=\"space-y-2\"><label for=\"email\" class=\"block text-base font-medium text-gray-700 dark:text-gray-300\">E-mail <span class=\"text-golden\">*</span></label> <input id=\"email\" name=\"email\" type=\"email\" required class=\"w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-orange focus:border-transparent transition\"></div><!-- Senha --><div class=\"space-y-2\"><label for=\"password\" class=\"block text-base font-medium text-gray-700 dark:text-gray-300\">Senha <span class=\"text-golden\">*</span></label> <input id=\"password\" name=\"password\" type=\"password\" required class=\"w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 focus:ring-2 focus:ring-orange focus:border-transparent transition\"><div class=\"flex justify-end pt-1\"><a href=\"/forgot-password\" class=\"text-sm text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\">Esqueceu a senha?</a></div></div><!-- Resultado da Autenticação --><div id=\"auth-result\" class=\"hidden\"></div><!-- Botão de Ação --><button type=\"submit\" class=\"w-full mt-8 px-4 py-3 text-lg bg-gradient-to-r from-orange to-golden text-white font-semibold rounded-lg hover:opacity-90 transition-all duration-300 transform hover:scale-[1.02] shadow-md\">Entrar</button></form><!-- Divisor --><div class=\"flex items-center my-6\"><div class=\"flex-1 h-px bg-gray-300 dark:bg-gray-600\"></div><span class=\"px-4 text-md text-gray-600 dark:text-gray-300\">ou</span><div class=\"flex-1 h-px bg-gray-300 dark:bg-gray-600\"></div></div><!-- Botões de OAuth2 --><div class=\"space-y-3\"><button id=\"google-signin\" onclick=\"handleProviderLogin(&#39;google&#39;)\" class=\"w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]\"><img src=\"https://www.google.com/favicon.ico\" alt=\"Google\" class=\"w-5 h-5 mr-2\"> <span class=\"text-md font-medium text-gray-700 dark:text-gray-300\">Continuar com Google</span></button> <button id=\"github-signin\" onclick=\"handleProviderLogin(&#39;github&#39;)\" class=\"w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]\"><img src=\"https://github.com/favicon.ico\" alt=\"GitHub\" class=\"w-5 h-5 mr-2\"> <span class=\"text-md font-medium text-gray-700 dark:text-gray-300\">Continuar com GitHub</span></button> <button id=\"facebook-signin\" onclick=\"handleProviderLogin(&#39;facebook&#39;)\" class=\"w-full flex items-center justify-center px-6 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-[1.02]\"><img src=\"https://www.facebook.com/favicon.ico\" alt=\"Facebook\" class=\"w-5 h-5 mr-2\"> <span class=\"text-md font-medium text-gray-700 dark:text-gray-300\">Continuar com Facebook</span></button></div><!-- Link para Cadastro --><div class=\"mt-6 text-center\"><p class=\"text-base text-gray-600 dark:text-gray-300\">Não tem uma conta?  <a href=\"/signup\" class=\"text-orange font-medium hover:underline dark:text-golden\">Cadastre-se</a></p></div></div></div></main><!-- Rodapé -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.FooterLogin().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<!-- Animação de Carregamento -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.ScriptAnimations().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
