package custom

import "fmt"

templ ProjectCard(title string, description string, status string, progress int, participants int, location string, ods []string, categories []string, stars int) {
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden border border-gray-200 dark:border-gray-700 transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
        <!-- Cabeçalho com Imagem -->
        <div class="h-48 bg-gradient-to-br from-green/30 to-blue/30 relative">
            <!-- Imagem de placeholder - pode ser substituída por uma imagem real -->
            <div class="w-full h-full bg-gradient-to-r from-green-100 to-blue-100 dark:from-gray-700 dark:to-gray-600 flex items-center justify-center">
                <span class="text-5xl opacity-30">{ getProjectIcon(categories[0]) }</span>
            </div>
            
            <!-- Badge de Status -->
            <div class={ "absolute top-0 right-0 m-3 text-white px-3 py-1 rounded-full text-sm font-medium " + getStatusColorClass(status) }>
                { getStatusText(status) }
            </div>
        </div>
        
        <!-- Corpo do Card -->
        <div class="p-5">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-xl font-bold text-gray-900 dark:text-white">
                    <span class="mr-2">{ getCategoryIcon(categories[0]) }</span>
                    { title }
                </h3>
                
                <!-- Sistema de Estrelas -->
                <button 
                    class="star-button flex items-center gap-1 text-sm text-gray-600 dark:text-gray-400 hover:text-golden" 
                    data-starred="false" 
                    hx-post="/projects/star" 
                    hx-swap="none"
                >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                    </svg>
                    <span class="star-count">{ stars }</span>
                </button>
            </div>
            
            <!-- Tags -->
            <div class="flex flex-wrap gap-2 mb-4">
                // @for _, category := range categories {
                //     <span class={ "px-2 py-1 rounded-full text-xs " + getCategoryColorClass(category) }>
                //         { category }
                //     </span>
                // }
                // @for _, odsNumber := range ods {
                //     <span class="bg-orange/10 text-orange dark:bg-orange/20 dark:text-orange/80 px-2 py-1 rounded-full text-xs">
                //         ODS { odsNumber }
                //     </span>
                // }
            </div>
            
            <!-- Descrição -->
            <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-2">
                { description }
            </p>
            
            <!-- Barra de Progresso -->
            <div class="mb-4">
                <div class="flex items-center justify-between text-sm mb-1">
                    <span class="text-orange dark:text-golden font-medium">Progresso:</span>
                    <span class={ "font-medium " + getProgressColorClass(progress) }>{ progress }%</span>
                </div>
                <div class="h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
                    <div class={ "h-2 rounded-full " + getProgressBarColorClass(progress) } style={ "width: " + fmt.Sprintf("%d", progress) + "%" }></div>
                </div>
            </div>
            
            <!-- Localização e Pessoas -->
            <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4">
                <div class="flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    <span>{ location }</span>
                </div>
                <div class="flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                    </svg>
                    <span>{ participants } participantes</span>
                </div>
            </div>
            
            <!-- Botões de Ação -->
            <div class="flex space-x-2">
                <button 
                    class="flex-1 py-2 bg-green text-white rounded-lg hover:bg-green/80 transition flex items-center justify-center gap-2"
                    hx-post="/projects/join" 
                    hx-swap="none"
                >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                    </svg>
                    Participar
                </button>
                <button 
                    class="flex-1 py-2 bg-blue text-white rounded-lg hover:bg-blue/80 transition flex items-center justify-center gap-2"
                    hx-get="/projects/comments" 
                    hx-target="#comments-modal"
                >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                    </svg>
                    Comentar
                </button>
                <button 
                    class="w-10 h-10 flex items-center justify-center bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition"
                    hx-post="/projects/share" 
                    hx-swap="none"
                >
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>
}

// Funções auxiliares para estilização dinâmica
func getStatusColorClass(status string) string {
    switch status {
    case "active":
        return "bg-green/80 dark:bg-green/90"
    case "new":
        return "bg-blue/80 dark:bg-blue/90"
    case "completed":
        return "bg-purple/80 dark:bg-purple/90"
    default:
        return "bg-gray-500"
    }
}

func getStatusText(status string) string {
    switch status {
    case "active":
        return "Ativo"
    case "new":
        return "Novo"
    case "completed":
        return "Concluído"
    default:
        return status
    }
}

func getCategoryColorClass(category string) string {
    switch category {
    case "Meio Ambiente":
        return "bg-green/10 text-green dark:bg-green/20 dark:text-green/80"
    case "Educação":
        return "bg-blue/10 text-blue dark:bg-blue/20 dark:text-blue/80"
    case "Saúde":
        return "bg-red/10 text-red dark:bg-red/20 dark:text-red/80"
    case "Tecnologia":
        return "bg-purple/10 text-purple dark:bg-purple/20 dark:text-purple/80"
    case "Cultura":
        return "bg-yellow/10 text-yellow-600 dark:bg-yellow/20 dark:text-yellow-500"
    default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"
    }
}

func getProgressColorClass(progress int) string {
    if progress >= 75 {
        return "text-green dark:text-green-400"
    } else if progress >= 50 {
        return "text-blue dark:text-blue-400"
    } else if progress >= 25 {
        return "text-orange dark:text-orange-400"
    }
    return "text-red dark:text-red-400"
}

func getProgressBarColorClass(progress int) string {
    if progress >= 75 {
        return "bg-green"
    } else if progress >= 50 {
        return "bg-blue"
    } else if progress >= 25 {
        return "bg-orange"
    }
    return "bg-red"
}

func getProjectIcon(category string) string {
    switch category {
    case "Meio Ambiente":
        return "🌱"
    case "Educação":
        return "📚"
    case "Saúde":
        return "🏥"
    case "Tecnologia":
        return "💻"
    case "Cultura":
        return "🎭"
    default:
        return "🌟"
    }
}

func getCategoryIcon(category string) string {
    switch category {
    case "Meio Ambiente":
        return "🌿"
    case "Educação":
        return "🎓"
    case "Saúde":
        return "❤️"
    case "Tecnologia":
        return "🤖"
    case "Cultura":
        return "🎨"
    case "Agricultura":
        return "🚜"
    case "Social":
        return "👥"
    default:
        return "✨"
    }
}