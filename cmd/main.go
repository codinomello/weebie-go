package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/codinomello/weebie-go/services/authentication"
	"github.com/codinomello/weebie-go/services/database"
	"github.com/codinomello/weebie-go/services/environment"
	"github.com/codinomello/weebie-go/services/routes"
)

func main() {
	// Carrega as vari√°veis do ambiente
	environment.LoadEnviromentVariables()

	// Conex√£o com o MongoDB
	if err := database.ConnectMongoDB(os.Getenv("MONGODB_URI")); err != nil {
		log.Fatalf("‚ùå erro ao verificar conex√£o com o mongodb: %v", err)
	} else {
		log.Println("üçÉ banco de dados mongodb conectado com sucesso!")
	}

	// Fecha a conex√£o com o banco de dados ao final da execu√ß√£o do programa
	defer database.DisconnectMongoDB()

	// Inicializa√ß√£o do Firebase
	_, err := authentication.InitFirebaseApp(os.Getenv("FIREBASE_CONFIG"))
	if err != nil {
		log.Fatalf("‚ùå erro ao inicializar o firebase: %s\n", err)
	} else {
		log.Println("üî• autentica√ß√£o com o firebase inicializada com sucesso!")
	}

	// Cria√ß√£o do roteador de servidores HTTP
	router := http.NewServeMux()

	// Setando as rotas
	routes.SetupRoutes(router)

	// Porta principal do servidor HTTP
	port := os.Getenv("LISTEN_ADDRESS")

	// Configura√ß√£o do servidor HTTP
	server := &http.Server{
		Addr:         ":" + port,
		Handler:      router,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Inicializa√ß√£o do servidor
	log.Printf("üåê servidor inicializado no endere√ßo: http://localhost%s\n", server.Addr)
	if err := server.ListenAndServe(); err != nil {
		log.Fatalf("‚ùå erro ao inicializar o servidor: %s\n", err)
	}
}
