package components

templ ScriptHead() {
    @ScriptHeadSource()
    @ScriptHeadTailwindConfig()
}

templ ScriptBody() {
    @ScriptBodyFirebase()
    @ScriptBodyDarkMode()
    @ScriptBodySource()
}

templ ScriptHeadSource() {
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@2.0.4"></script>
}

templ ScriptHeadTailwindConfig() {
    <script>
        tailwind.config = {
          darkMode: 'class',
          theme: {
            extend: {
              colors: {
                // Cores primárias
                red: '#FF0000',    // Vermelho
                green: '#32CD32',  // Verde
                blue: '#00BFFF',   // Azul
                lilac: '#C8A2C8',  // Lilás
                pink: '#FF1493',   // Rosa
                orange: '#FF6F00', // Laranja
                golden: '#FFD700', // Ouro

                // Cores sucundárias
                brown: '#8B4513',  // Marrom
                teal: '#40E0D0',   // Turquesa
                silver: '#C0C0C0', // Prata
                copper: '#B87333', // Cobre
              }
            }
          }
        }
    </script>
}

templ ScriptHeadODSList() {
    <script>
        const odsList = [
            { number: 1, emoji: '🍽️', name: 'Erradicação da Pobreza', description: 'Acabar com a pobreza em todas as suas formas, em todos os lugares.' },
            { number: 2, emoji: '🌱', name: 'Fome Zero e Agricultura Sustentável', description: 'Acabar com a fome, alcançar a segurança alimentar e promover a agricultura sustentável.' },
            { number: 3, emoji: '💊', name: 'Saúde e Bem-Estar', description: 'Assegurar uma vida saudável e promover o bem-estar para todos.' },
            { number: 4, emoji: '📚', name: 'Educação de Qualidade', description: 'Garantir educação inclusiva e equitativa de qualidade.' },
            { number: 5, emoji: '👩‍❤️‍👨', name: 'Igualdade de Gênero', description: 'Alcançar a igualdade de gênero e empoderar todas as mulheres e meninas.' },
            { number: 6, emoji: '💧', name: 'Água Potável e Saneamento', description: 'Garantir disponibilidade e manejo sustentável da água.' },
            { number: 7, emoji: '⚡', name: 'Energia Limpa e Acessível', description: 'Garantir acesso à energia acessível, confiável e sustentável.' },
            { number: 8, emoji: '💼', name: 'Trabalho Decente e Crescimento Econômico', description: 'Promover o crescimento econômico sustentado e o trabalho decente.' },
            { number: 9, emoji: '🏭', name: 'Indústria, Inovação e Infraestrutura', description: 'Construir infraestrutura resiliente e promover a industrialização sustentável.' },
            { number: 10, emoji: '⚖️', name: 'Redução das Desigualdades', description: 'Reduzir a desigualdade dentro e entre os países.' },
            { number: 11, emoji: '🌆', name: 'Cidades e Comunidades Sustentáveis', description: 'Tornar as cidades e os assentamentos humanos inclusivos, seguros e sustentáveis.' },
            { number: 12, emoji: '♻️', name: 'Consumo e Produção Responsáveis', description: 'Garantir padrões de consumo e produção sustentáveis.' },
            { number: 13, emoji: '🌡️', name: 'Ação Contra a Mudança Global do Clima', description: 'Tomar medidas urgentes para combater a mudança climática.' },
            { number: 14, emoji: '🐟', name: 'Vida na Água', description: 'Conservar e usar de forma sustentável os oceanos e recursos marinhos.' },
            { number: 15, emoji: '🌳', name: 'Vida Terrestre', description: 'Proteger, restaurar e promover o uso sustentável dos ecossistemas terrestres.' },
            { number: 16, emoji: '🕊️', name: 'Paz, Justiça e Instituições Eficazes', description: 'Promover sociedades pacíficas e inclusivas para o desenvolvimento sustentável.' },
            { number: 17, emoji: '🤝', name: 'Parcerias e Meios de Implementação', description: 'Fortalecer os meios de implementação e revitalizar a parceria global.' }
        ];
    </script>
}

templ ScriptBodyFirebase() {
    <script>
        // Configuração do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U",
            authDomain: "weebie-go.firebaseapp.com",
            projectId: "weebie-go",
            storageBucket: "weebie-go.firebasestorage.app",
            messagingSenderId: "321509944065",
            appId: "1:321509944065:web:199a546b7055f461ec4900",
            measurementId: "G-S5CG0CLRVS"
        };

        // Inicializar Firebase
        firebase.initializeApp(firebaseConfig);
        
        // Referencias DOM
        const loginButton = document.getElementById('login-button');
        const logoutButton = document.getElementById('logout-button');
        const userInfo = document.getElementById('user-info');
        const loading = document.getElementById('loading');
        const profilePic = document.getElementById('profile-picture');
        const userName = document.getElementById('user-name');
        const userEmail = document.getElementById('user-email');
        const userId = document.getElementById('user-id');
        
        // Evento de login
        loginButton.addEventListener('click', async () => {
            try {
                loading.style.display = 'block';
                
                const provider = new firebase.auth.GoogleAuthProvider();
                const result = await firebase.auth().signInWithPopup(provider);
                
                // Usuário logado com sucesso
                const user = result.user;
                console.log("Usuário autenticado:", user);
                
                // Obter token
                const idToken = await user.getIdToken();
                
                // Enviar token para backend
                await verifyWithBackend(idToken);
            } catch (error) {
                console.error("Erro de autenticação:", error);
                alert(`Erro ao fazer login: ${error.message}`);
                loading.style.display = 'none';
            }
        });
        
        // Evento de logout
        logoutButton.addEventListener('click', () => {
            firebase.auth().signOut();
            hideUserInfo();
        });
        
        // Enviar token para o backend Go
        async function verifyWithBackend(idToken) {
            try {
                const response = await fetch('/api/auth', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${idToken}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Falha na autenticação com o backend');
                }
                
                console.log("Autenticação verificada pelo backend:", data);
                
                // Exibir informações do usuário
                displayUserInfo(data);
            } catch (error) {
                console.error("Erro na verificação com backend:", error);
                alert(`Erro na verificação: ${error.message}`);
            } finally {
                loading.style.display = 'none';
            }
        }
        
        // Exibir informações do usuário
        function displayUserInfo(userData) {
            profilePic.src = userData.picture || '';
            userName.textContent = userData.name || 'Usuário';
            userEmail.textContent = userData.email || '';
            userId.textContent = userData.uid || '';
            
            userInfo.style.display = 'block';
            loginButton.style.display = 'none';
        }
        
        // Esconder informações do usuário
        function hideUserInfo() {
            userInfo.style.display = 'none';
            loginButton.style.display = 'block';
        }
        
        // Verificar estado da autenticação quando a página carrega
        firebase.auth().onAuthStateChanged(async (user) => {
            if (user) {
                try {
                    loading.style.display = 'block';
                    const idToken = await user.getIdToken();
                    await verifyWithBackend(idToken);
                } catch (error) {
                    console.error("Erro ao verificar token:", error);
                    loading.style.display = 'none';
                }
            } else {
                hideUserInfo();
            }
        });
    </script>
}

templ ScriptBodyDarkMode() {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
          const themeToggle = document.getElementById('theme-toggle');
          const html = document.documentElement;
          
          // Verificar preferência salva
          const savedTheme = localStorage.getItem('theme') || 'light';
          html.classList.toggle('dark', savedTheme === 'dark');
        
          themeToggle.addEventListener('click', () => {
            html.classList.toggle('dark');
            localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
            updateThemeIcon();
          });
        
          function updateThemeIcon() {
            const isDark = html.classList.contains('dark');
            themeToggle.querySelectorAll('svg').forEach(icon => {
              icon.classList.toggle('hidden', isDark ? icon.getAttribute('fill') === '#fff' : icon.getAttribute('fill') !== '#fff');
            });
          }
          updateThemeIcon();
        });
    </script>
}

templ ScriptBodySource() {
    <!-- Import do Firebase via CDN -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>

    <!-- Importação do Flowbite.js via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
}

templ ScriptGetCurrentYear() {
    <script>
        // Ano atual
        var years = document.getElementsByClassName("current-year");
        Array.from(years).forEach(year => {
            year.innerHTML = new Date().getFullYear();
        });
    </script>
}