// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ScriptHead() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptHeadSource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptHeadTailwindConfig().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBody() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptBodyFirebase().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptBodyDarkMode().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptBodySource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadSource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><!-- HTMX --><script src=\"https://unpkg.com/htmx.org@2.0.4\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadTailwindConfig() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n        tailwind.config = {\n          darkMode: 'class',\n          theme: {\n            extend: {\n              colors: {\n                // Cores prim√°rias\n                red: '#FF0000',    // Vermelho\n                green: '#32CD32',  // Verde\n                blue: '#00BFFF',   // Azul\n                lilac: '#C8A2C8',  // Lil√°s\n                pink: '#FF1493',   // Rosa\n                orange: '#FF6F00', // Laranja\n                golden: '#FFD700', // Ouro\n\n                // Cores sucund√°rias\n                brown: '#8B4513',  // Marrom\n                teal: '#40E0D0',   // Turquesa\n                silver: '#C0C0C0', // Prata\n                copper: '#B87333', // Cobre\n              }\n            }\n          }\n        }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadODSList() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\n        const odsList = [\n            { number: 1, emoji: 'üçΩÔ∏è', name: 'Erradica√ß√£o da Pobreza', description: 'Acabar com a pobreza em todas as suas formas, em todos os lugares.' },\n            { number: 2, emoji: 'üå±', name: 'Fome Zero e Agricultura Sustent√°vel', description: 'Acabar com a fome, alcan√ßar a seguran√ßa alimentar e promover a agricultura sustent√°vel.' },\n            { number: 3, emoji: 'üíä', name: 'Sa√∫de e Bem-Estar', description: 'Assegurar uma vida saud√°vel e promover o bem-estar para todos.' },\n            { number: 4, emoji: 'üìö', name: 'Educa√ß√£o de Qualidade', description: 'Garantir educa√ß√£o inclusiva e equitativa de qualidade.' },\n            { number: 5, emoji: 'üë©\u200d‚ù§Ô∏è\u200düë®', name: 'Igualdade de G√™nero', description: 'Alcan√ßar a igualdade de g√™nero e empoderar todas as mulheres e meninas.' },\n            { number: 6, emoji: 'üíß', name: '√Ågua Pot√°vel e Saneamento', description: 'Garantir disponibilidade e manejo sustent√°vel da √°gua.' },\n            { number: 7, emoji: '‚ö°', name: 'Energia Limpa e Acess√≠vel', description: 'Garantir acesso √† energia acess√≠vel, confi√°vel e sustent√°vel.' },\n            { number: 8, emoji: 'üíº', name: 'Trabalho Decente e Crescimento Econ√¥mico', description: 'Promover o crescimento econ√¥mico sustentado e o trabalho decente.' },\n            { number: 9, emoji: 'üè≠', name: 'Ind√∫stria, Inova√ß√£o e Infraestrutura', description: 'Construir infraestrutura resiliente e promover a industrializa√ß√£o sustent√°vel.' },\n            { number: 10, emoji: '‚öñÔ∏è', name: 'Redu√ß√£o das Desigualdades', description: 'Reduzir a desigualdade dentro e entre os pa√≠ses.' },\n            { number: 11, emoji: 'üåÜ', name: 'Cidades e Comunidades Sustent√°veis', description: 'Tornar as cidades e os assentamentos humanos inclusivos, seguros e sustent√°veis.' },\n            { number: 12, emoji: '‚ôªÔ∏è', name: 'Consumo e Produ√ß√£o Respons√°veis', description: 'Garantir padr√µes de consumo e produ√ß√£o sustent√°veis.' },\n            { number: 13, emoji: 'üå°Ô∏è', name: 'A√ß√£o Contra a Mudan√ßa Global do Clima', description: 'Tomar medidas urgentes para combater a mudan√ßa clim√°tica.' },\n            { number: 14, emoji: 'üêü', name: 'Vida na √Ågua', description: 'Conservar e usar de forma sustent√°vel os oceanos e recursos marinhos.' },\n            { number: 15, emoji: 'üå≥', name: 'Vida Terrestre', description: 'Proteger, restaurar e promover o uso sustent√°vel dos ecossistemas terrestres.' },\n            { number: 16, emoji: 'üïäÔ∏è', name: 'Paz, Justi√ßa e Institui√ß√µes Eficazes', description: 'Promover sociedades pac√≠ficas e inclusivas para o desenvolvimento sustent√°vel.' },\n            { number: 17, emoji: 'ü§ù', name: 'Parcerias e Meios de Implementa√ß√£o', description: 'Fortalecer os meios de implementa√ß√£o e revitalizar a parceria global.' }\n        ];\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyFirebase() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<script>\n        // Configura√ß√£o do Firebase\n        const firebaseConfig = {\n            apiKey: \"AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U\",\n            authDomain: \"weebie-go.firebaseapp.com\",\n            projectId: \"weebie-go\",\n            storageBucket: \"weebie-go.firebasestorage.app\",\n            messagingSenderId: \"321509944065\",\n            appId: \"1:321509944065:web:199a546b7055f461ec4900\",\n            measurementId: \"G-S5CG0CLRVS\"\n        };\n\n        // Inicializar Firebase\n        const app = firebase.initializeApp(firebaseConfig);\n        const auth = firebase.auth();\n        \n        // Referencias DOM\n        const loginButton = document.getElementById('login-button');\n        const logoutButton = document.getElementById('logout-button');\n        const userInfo = document.getElementById('user-info');\n        const loading = document.getElementById('loading');\n        const profilePic = document.getElementById('profile-picture');\n        const userName = document.getElementById('user-name');\n        const userEmail = document.getElementById('user-email');\n        const userId = document.getElementById('user-id');\n        \n        // Evento de login\n        loginButton.addEventListener('click', async () => {\n            try {\n                loading.style.display = 'block';\n                \n                const provider = new firebase.auth.GoogleAuthProvider();\n                const result = await firebase.auth().signInWithPopup(provider);\n                \n                // Usu√°rio logado com sucesso\n                const user = result.user;\n                console.log(\"Usu√°rio autenticado:\", user);\n                \n                // Obter token\n                const idToken = await user.getIdToken();\n                \n                // Enviar token para backend\n                await verifyWithBackend(idToken);\n            } catch (error) {\n                console.error(\"Erro de autentica√ß√£o:\", error);\n                alert(`Erro ao fazer login: ${error.message}`);\n                loading.style.display = 'none';\n            }\n        });\n        \n        // Evento de logout\n        logoutButton.addEventListener('click', () => {\n            firebase.auth().signOut();\n            hideUserInfo();\n        });\n        \n        // Enviar token para o backend Go\n        async function verifyWithBackend(idToken) {\n            try {\n                const response = await fetch('/api/auth', {\n                    method: 'POST',\n                    headers: {\n                        'Authorization': `Bearer ${idToken}`,\n                        'Content-Type': 'application/json'\n                    }\n                });\n                \n                const data = await response.json();\n                \n                if (!response.ok) {\n                    throw new Error(data.error || 'Falha na autentica√ß√£o com o backend');\n                }\n                \n                console.log(\"Autentica√ß√£o verificada pelo backend:\", data);\n                \n                // Exibir informa√ß√µes do usu√°rio\n                displayUserInfo(data);\n            } catch (error) {\n                console.error(\"Erro na verifica√ß√£o com backend:\", error);\n                alert(`Erro na verifica√ß√£o: ${error.message}`);\n            } finally {\n                loading.style.display = 'none';\n            }\n        }\n        \n        // Exibir informa√ß√µes do usu√°rio\n        function displayUserInfo(userData) {\n            profilePic.src = userData.picture || '';\n            userName.textContent = userData.name || 'Usu√°rio';\n            userEmail.textContent = userData.email || '';\n            userId.textContent = userData.uid || '';\n            \n            userInfo.style.display = 'block';\n            loginButton.style.display = 'none';\n        }\n        \n        // Esconder informa√ß√µes do usu√°rio\n        function hideUserInfo() {\n            userInfo.style.display = 'none';\n            loginButton.style.display = 'block';\n        }\n        \n        // Verificar estado da autentica√ß√£o quando a p√°gina carrega\n        firebase.auth().onAuthStateChanged(async (user) => {\n            if (user) {\n                try {\n                    loading.style.display = 'block';\n                    const idToken = await user.getIdToken();\n                    await verifyWithBackend(idToken);\n                } catch (error) {\n                    console.error(\"Erro ao verificar token:\", error);\n                    loading.style.display = 'none';\n                }\n            } else {\n                hideUserInfo();\n            }\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyDarkMode() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const themeToggle = document.getElementById('theme-toggle');\n            const html = document.documentElement;\n          \n            // Verificar prefer√™ncia salva\n            const savedTheme = localStorage.getItem('theme') || 'light';\n            html.classList.toggle('dark', savedTheme === 'dark');\n        \n            themeToggle.addEventListener('click', () => {\n                html.classList.toggle('dark');\n                localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');\n                updateThemeIcon();\n            });\n        \n            function updateThemeIcon() {\n                const isDark = html.classList.contains('dark');\n                themeToggle.querySelectorAll('svg').forEach(icon => {\n                    icon.classList.toggle('hidden', isDark ? icon.getAttribute('fill') === '#fff' : icon.getAttribute('fill') !== '#fff');\n                 });\n            }\n            updateThemeIcon();\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodySource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Import do Firebase via CDN --><script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js\"></script><script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js\"></script><!-- Importa√ß√£o do Flowbite.js via CDN --><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptGetCurrentYear() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<script>\n        // Ano atual\n        var years = document.getElementsByClassName(\"current-year\");\n        Array.from(years).forEach(year => {\n            year.innerHTML = new Date().getFullYear();\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
