// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ScriptHead() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptHeadSource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptHeadTheme().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptHeadTailwindCSS().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBody() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptBodySource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptBodyFirebaseAuth().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadSource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><!-- HTMX --><script src=\"https://unpkg.com/htmx.org@2.0.4\"></script><!-- Biblioteca para validação de e-mail --><script src=\"https://cdnjs.cloudflare.com/ajax/libs/validator/13.11.0/validator.min.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadTheme() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');\r\n            const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');\r\n            const themeToggleBtn = document.getElementById('theme-toggle');\r\n\r\n            // Verifica o tema salvo no localStorage ou a preferência do sistema\r\n            if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\r\n                // Se o tema escuro estiver ativo, exibe o ícone da lua e oculta o ícone do sol\r\n                document.documentElement.classList.add('dark');\r\n                themeToggleDarkIcon.classList.remove('hidden');\r\n                themeToggleLightIcon.classList.add('hidden');\r\n            } else {\r\n                // Se o tema claro estiver ativo, exibe o ícone do sol e oculta o ícone da lua\r\n                document.documentElement.classList.remove('dark');\r\n                themeToggleLightIcon.classList.remove('hidden');\r\n                themeToggleDarkIcon.classList.add('hidden');\r\n            }\r\n\r\n            // Adiciona o evento de clique ao botão de alternância de tema\r\n            themeToggleBtn.addEventListener('click', () => {\r\n                // Alterna os ícones\r\n                themeToggleDarkIcon.classList.toggle('hidden');\r\n                themeToggleLightIcon.classList.toggle('hidden');\r\n\r\n                // Alterna o tema\r\n                if (document.documentElement.classList.contains('dark')) {\r\n                document.documentElement.classList.remove('dark');\r\n                localStorage.setItem('color-theme', 'light');\r\n                } else {\r\n                document.documentElement.classList.add('dark');\r\n                localStorage.setItem('color-theme', 'dark');\r\n                }\r\n            });\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadTailwindCSS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\r\n        tailwind.config = {\r\n          darkMode: 'class',\r\n          theme: {\r\n            extend: {\r\n              colors: {\r\n                // Cores primárias\r\n                red: '#FF0000',    // Vermelho\r\n                green: '#32CD32',  // Verde\r\n                blue: '#00BFFF',   // Azul\r\n                lilac: '#C8A2C8',  // Lilás\r\n                pink: '#FF1493',   // Rosa\r\n                orange: '#FF6F00', // Laranja\r\n                golden: '#FFD700', // Ouro\r\n\r\n                // Cores sucundárias\r\n                brown: '#8B4513',  // Marrom\r\n                teal: '#40E0D0',   // Turquesa\r\n                silver: '#C0C0C0', // Prata\r\n                copper: '#B87333', // Cobre\r\n              }\r\n            }\r\n          }\r\n        }\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptODSList() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<script>\r\n        const odsList = [\r\n            { number: 1, emoji: '🍽️', name: 'Erradicação da Pobreza', description: 'Acabar com a pobreza em todas as suas formas, em todos os lugares.' },\r\n            { number: 2, emoji: '🌱', name: 'Fome Zero e Agricultura Sustentável', description: 'Acabar com a fome, alcançar a segurança alimentar e promover a agricultura sustentável.' },\r\n            { number: 3, emoji: '💊', name: 'Saúde e Bem-Estar', description: 'Assegurar uma vida saudável e promover o bem-estar para todos.' },\r\n            { number: 4, emoji: '📚', name: 'Educação de Qualidade', description: 'Garantir educação inclusiva e equitativa de qualidade.' },\r\n            { number: 5, emoji: '👩\u200d❤️\u200d👨', name: 'Igualdade de Gênero', description: 'Alcançar a igualdade de gênero e empoderar todas as mulheres e meninas.' },\r\n            { number: 6, emoji: '💧', name: 'Água Potável e Saneamento', description: 'Garantir disponibilidade e manejo sustentável da água.' },\r\n            { number: 7, emoji: '⚡', name: 'Energia Limpa e Acessível', description: 'Garantir acesso à energia acessível, confiável e sustentável.' },\r\n            { number: 8, emoji: '💼', name: 'Trabalho Decente e Crescimento Econômico', description: 'Promover o crescimento econômico sustentado e o trabalho decente.' },\r\n            { number: 9, emoji: '🏭', name: 'Indústria, Inovação e Infraestrutura', description: 'Construir infraestrutura resiliente e promover a industrialização sustentável.' },\r\n            { number: 10, emoji: '⚖️', name: 'Redução das Desigualdades', description: 'Reduzir a desigualdade dentro e entre os países.' },\r\n            { number: 11, emoji: '🌆', name: 'Cidades e Comunidades Sustentáveis', description: 'Tornar as cidades e os assentamentos humanos inclusivos, seguros e sustentáveis.' },\r\n            { number: 12, emoji: '♻️', name: 'Consumo e Produção Responsáveis', description: 'Garantir padrões de consumo e produção sustentáveis.' },\r\n            { number: 13, emoji: '🌡️', name: 'Ação Contra a Mudança Global do Clima', description: 'Tomar medidas urgentes para combater a mudança climática.' },\r\n            { number: 14, emoji: '🐟', name: 'Vida na Água', description: 'Conservar e usar de forma sustentável os oceanos e recursos marinhos.' },\r\n            { number: 15, emoji: '🌳', name: 'Vida Terrestre', description: 'Proteger, restaurar e promover o uso sustentável dos ecossistemas terrestres.' },\r\n            { number: 16, emoji: '🕊️', name: 'Paz, Justiça e Instituições Eficazes', description: 'Promover sociedades pacíficas e inclusivas para o desenvolvimento sustentável.' },\r\n            { number: 17, emoji: '🤝', name: 'Parcerias e Meios de Implementação', description: 'Fortalecer os meios de implementação e revitalizar a parceria global.' }\r\n        ];\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodySource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Importação do Flowbite.js via CDN --><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyFirebaseAuth() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js\"></script><script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js\"></script><script>\r\n        // 1. Configuração do Firebase\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U\",\r\n            authDomain: \"weebie-go.firebaseapp.com\",\r\n            projectId: \"weebie-go\",\r\n            storageBucket: \"weebie-go.firebasestorage.app\",\r\n            messagingSenderId: \"321509944065\",\r\n            appId: \"1:321509944065:web:199a546b7055f461ec4900\",\r\n            measurementId: \"G-S5CG0CLRVS\"\r\n        };\r\n\r\n        // 2. Inicialize o Firebase\r\n        const app = firebase.initializeApp(firebaseConfig);\r\n        const auth = firebase.auth();\r\n\r\n        // 3. Inicialize os provedores DEPOIS do Firebase estar configurado\r\n        const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n        const facebookProvider = new firebase.auth.FacebookAuthProvider();\r\n        const githubProvider = new firebase.auth.GithubAuthProvider();\r\n\r\n        // 4. Configurar os listeners de clique DEPOIS das inicializações\r\n        document.getElementById(\"google-signin\").addEventListener(\"click\", () => {\r\n        auth.signInWithPopup(googleProvider)\r\n            .then((result) => {\r\n            console.log(\"Login com Google bem-sucedido:\", result.user);\r\n            })\r\n            .catch((error) => {\r\n            console.error(\"Erro no login Google:\", error);\r\n            });\r\n        });\r\n\r\n        document.getElementById(\"facebook-signin\").addEventListener(\"click\", () => {\r\n        auth.signInWithPopup(facebookProvider)\r\n            .then((result) => {\r\n            console.log(\"Login com Facebook bem-sucedido:\", result.user);\r\n            })\r\n            .catch((error) => {\r\n            console.error(\"Erro no login Facebook:\", error);\r\n            });\r\n        });\r\n\r\n        document.getElementById(\"github-signin\").addEventListener(\"click\", () => {\r\n        auth.signInWithPopup(githubProvider)\r\n            .then((result) => {\r\n            console.log(\"Login com GitHub bem-sucedido:\", result.user);\r\n            })\r\n            .catch((error) => {\r\n            console.error(\"Erro no login GitHub:\", error);\r\n            });\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyODSList() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<script>\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n            const themeToggle = document.getElementById('theme-toggle');\r\n            const html = document.documentElement;\r\n            const odsContainer = document.getElementById('ods-container');\r\n            const odsPopover = document.getElementById('ods-popover');\r\n            const odsTitle = document.getElementById('ods-title');\r\n            const odsDescription = document.getElementById('ods-description');\r\n\r\n            // Tema\r\n            themeToggle.addEventListener('click', () => {\r\n                html.classList.toggle('dark');\r\n                localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');\r\n            });\r\n\r\n            if (localStorage.getItem('theme') === 'dark') html.classList.add('dark');\r\n\r\n            // Gerar ODS\r\n            odsList.forEach(ods => {\r\n                const odsItem = document.createElement('div');\r\n                odsItem.className = 'flex items-center justify-between p-2 rounded-lg bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600';\r\n                odsItem.innerHTML = `\r\n                    <label class=\"flex items-center gap-2 flex-1\">\r\n                        <input type=\"checkbox\" name=\"ods\" value=\"${ods.number}\" \r\n                                class=\"w-4 h-4 border-golden rounded focus:ring-golden dark:bg-gray-900\">\r\n                        <span class=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                            ${ods.emoji} ODS ${ods.number}\r\n                        </span>\r\n                    </label>\r\n                    <button type=\"button\" class=\"text-golden hover:text-golden/80 px-2 ods-info\" \r\n                            data-number=\"${ods.number}\">+</button>`;\r\n                odsContainer.appendChild(odsItem);\r\n            });\r\n\r\n            // Popover ODS\r\n            document.querySelectorAll('.ods-info').forEach(button => {\r\n                button.addEventListener('click', (e) => {\r\n                    const odsNumber = parseInt(e.target.dataset.number);\r\n                    const ods = odsList.find(o => o.number === odsNumber);\r\n                    \r\n                    // Posicionar popover\r\n                    const rect = e.target.getBoundingClientRect();\r\n                    odsPopover.style.top = `${rect.top + window.scrollY}px`;\r\n                    odsPopover.style.left = `${rect.left + rect.width + 10}px`;\r\n                    \r\n                    // Atualizar conteúdo\r\n                    odsTitle.textContent = ods.name;\r\n                    odsDescription.textContent = ods.description;\r\n                    odsPopover.classList.remove('hidden');\r\n                });\r\n            });\r\n\r\n            // Fechar popover\r\n            document.addEventListener('click', (e) => {\r\n                if (!e.target.closest('.ods-info') && !e.target.closest('#ods-popover')) {\r\n                    odsPopover.classList.add('hidden');\r\n                }\r\n            });\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptGetCurrentYear() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<script>\r\n        // Ano atual\r\n        var years = document.getElementsByClassName(\"current-year\");\r\n        Array.from(years).forEach(year => {\r\n            year.innerHTML = new Date().getFullYear();\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
