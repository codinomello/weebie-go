package components

templ ScriptHead() {
    @ScriptHeadSource()
    @ScriptHeadTheme()
    @ScriptHeadTailwindCSS()
}

templ ScriptBody() {
    @ScriptBodySource()
    @ScriptBodyFirebaseAuth()
}

templ ScriptHeadSource() {
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@2.0.4"></script>

    <!-- Biblioteca para valida√ß√£o de e-mail -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/validator/13.11.0/validator.min.js"></script>
}

templ ScriptHeadTheme() {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
            const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
            const themeToggleBtn = document.getElementById('theme-toggle');

            // Verifica o tema salvo no localStorage ou a prefer√™ncia do sistema
            if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                // Se o tema escuro estiver ativo, exibe o √≠cone da lua e oculta o √≠cone do sol
                document.documentElement.classList.add('dark');
                themeToggleDarkIcon.classList.remove('hidden');
                themeToggleLightIcon.classList.add('hidden');
            } else {
                // Se o tema claro estiver ativo, exibe o √≠cone do sol e oculta o √≠cone da lua
                document.documentElement.classList.remove('dark');
                themeToggleLightIcon.classList.remove('hidden');
                themeToggleDarkIcon.classList.add('hidden');
            }

            // Adiciona o evento de clique ao bot√£o de altern√¢ncia de tema
            themeToggleBtn.addEventListener('click', () => {
                // Alterna os √≠cones
                themeToggleDarkIcon.classList.toggle('hidden');
                themeToggleLightIcon.classList.toggle('hidden');

                // Alterna o tema
                if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                localStorage.setItem('color-theme', 'light');
                } else {
                document.documentElement.classList.add('dark');
                localStorage.setItem('color-theme', 'dark');
                }
            });
        });
    </script>
}

templ ScriptHeadTailwindCSS() {
    <script>
        tailwind.config = {
          darkMode: 'class',
          theme: {
            extend: {
              colors: {
                // Cores prim√°rias
                red: '#FF0000',    // Vermelho
                green: '#32CD32',  // Verde
                blue: '#00BFFF',   // Azul
                lilac: '#C8A2C8',  // Lil√°s
                pink: '#FF1493',   // Rosa
                orange: '#FF6F00', // Laranja
                golden: '#FFD700', // Ouro

                // Cores sucund√°rias
                brown: '#8B4513',  // Marrom
                teal: '#40E0D0',   // Turquesa
                silver: '#C0C0C0', // Prata
                copper: '#B87333', // Cobre
              }
            }
          }
        }
    </script>
}

templ ScriptODSList() {
    <script>
        const odsList = [
            { number: 1, emoji: 'üçΩÔ∏è', name: 'Erradica√ß√£o da Pobreza', description: 'Acabar com a pobreza em todas as suas formas, em todos os lugares.' },
            { number: 2, emoji: 'üå±', name: 'Fome Zero e Agricultura Sustent√°vel', description: 'Acabar com a fome, alcan√ßar a seguran√ßa alimentar e promover a agricultura sustent√°vel.' },
            { number: 3, emoji: 'üíä', name: 'Sa√∫de e Bem-Estar', description: 'Assegurar uma vida saud√°vel e promover o bem-estar para todos.' },
            { number: 4, emoji: 'üìö', name: 'Educa√ß√£o de Qualidade', description: 'Garantir educa√ß√£o inclusiva e equitativa de qualidade.' },
            { number: 5, emoji: 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', name: 'Igualdade de G√™nero', description: 'Alcan√ßar a igualdade de g√™nero e empoderar todas as mulheres e meninas.' },
            { number: 6, emoji: 'üíß', name: '√Ågua Pot√°vel e Saneamento', description: 'Garantir disponibilidade e manejo sustent√°vel da √°gua.' },
            { number: 7, emoji: '‚ö°', name: 'Energia Limpa e Acess√≠vel', description: 'Garantir acesso √† energia acess√≠vel, confi√°vel e sustent√°vel.' },
            { number: 8, emoji: 'üíº', name: 'Trabalho Decente e Crescimento Econ√¥mico', description: 'Promover o crescimento econ√¥mico sustentado e o trabalho decente.' },
            { number: 9, emoji: 'üè≠', name: 'Ind√∫stria, Inova√ß√£o e Infraestrutura', description: 'Construir infraestrutura resiliente e promover a industrializa√ß√£o sustent√°vel.' },
            { number: 10, emoji: '‚öñÔ∏è', name: 'Redu√ß√£o das Desigualdades', description: 'Reduzir a desigualdade dentro e entre os pa√≠ses.' },
            { number: 11, emoji: 'üåÜ', name: 'Cidades e Comunidades Sustent√°veis', description: 'Tornar as cidades e os assentamentos humanos inclusivos, seguros e sustent√°veis.' },
            { number: 12, emoji: '‚ôªÔ∏è', name: 'Consumo e Produ√ß√£o Respons√°veis', description: 'Garantir padr√µes de consumo e produ√ß√£o sustent√°veis.' },
            { number: 13, emoji: 'üå°Ô∏è', name: 'A√ß√£o Contra a Mudan√ßa Global do Clima', description: 'Tomar medidas urgentes para combater a mudan√ßa clim√°tica.' },
            { number: 14, emoji: 'üêü', name: 'Vida na √Ågua', description: 'Conservar e usar de forma sustent√°vel os oceanos e recursos marinhos.' },
            { number: 15, emoji: 'üå≥', name: 'Vida Terrestre', description: 'Proteger, restaurar e promover o uso sustent√°vel dos ecossistemas terrestres.' },
            { number: 16, emoji: 'üïäÔ∏è', name: 'Paz, Justi√ßa e Institui√ß√µes Eficazes', description: 'Promover sociedades pac√≠ficas e inclusivas para o desenvolvimento sustent√°vel.' },
            { number: 17, emoji: 'ü§ù', name: 'Parcerias e Meios de Implementa√ß√£o', description: 'Fortalecer os meios de implementa√ß√£o e revitalizar a parceria global.' }
        ];
    </script>
}

templ ScriptBodySource() {
    <!-- Importa√ß√£o do Flowbite.js via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
}

templ ScriptBodyFirebaseAuth() {
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script>
        // 1. Configura√ß√£o do Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U",
            authDomain: "weebie-go.firebaseapp.com",
            projectId: "weebie-go",
            storageBucket: "weebie-go.firebasestorage.app",
            messagingSenderId: "321509944065",
            appId: "1:321509944065:web:199a546b7055f461ec4900",
            measurementId: "G-S5CG0CLRVS"
        };

        // 2. Inicialize o Firebase
        const app = firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();

        // 3. Inicialize os provedores DEPOIS do Firebase estar configurado
        const googleProvider = new firebase.auth.GoogleAuthProvider();
        const facebookProvider = new firebase.auth.FacebookAuthProvider();
        const githubProvider = new firebase.auth.GithubAuthProvider();

        // 4. Configurar os listeners de clique DEPOIS das inicializa√ß√µes
        document.getElementById("google-signin").addEventListener("click", () => {
        auth.signInWithPopup(googleProvider)
            .then((result) => {
            console.log("Login com Google bem-sucedido:", result.user);
            })
            .catch((error) => {
            console.error("Erro no login Google:", error);
            });
        });

        document.getElementById("facebook-signin").addEventListener("click", () => {
        auth.signInWithPopup(facebookProvider)
            .then((result) => {
            console.log("Login com Facebook bem-sucedido:", result.user);
            })
            .catch((error) => {
            console.error("Erro no login Facebook:", error);
            });
        });

        document.getElementById("github-signin").addEventListener("click", () => {
        auth.signInWithPopup(githubProvider)
            .then((result) => {
            console.log("Login com GitHub bem-sucedido:", result.user);
            })
            .catch((error) => {
            console.error("Erro no login GitHub:", error);
            });
        });
    </script>




    

    // <script src="https://www.gstatic.com/firebasejs/11.7.3/firebase-app.js"></script>
    // <script src="https://www.gstatic.com/firebasejs/11.7.3/firebase-auth.js"></script>
    // <script>
    //     const firebaseConfig = {
    //         apiKey: "AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U",
    //         authDomain: "weebie-go.firebaseapp.com",
    //         projectId: "weebie-go",
    //         storageBucket: "weebie-go.firebasestorage.app",
    //         messagingSenderId: "321509944065",
    //         appId: "1:321509944065:web:199a546b7055f461ec4900",
    //         measurementId: "G-S5CG0CLRVS"
    //     };

    //     // Inicialize o Firebase
    //     const app = firebase.initializeApp(firebaseConfig);
    //     const auth = firebase.auth();

    //     // Vari√°vel para controlar o modo (login/cadastro)
    //     let isLoginMode = false;

    //     // Elementos do DOM
    //     const formTitle = document.getElementById("form-title");
    //     const formAction = document.getElementById("form-action");
    //     const nameField = document.getElementById("name-field");
    //     const phoneField = document.getElementById("phone-field");
    //     const termsCheckbox = document.getElementById("terms");
    //     const toggleAuthBtn = document.getElementById("toggle-auth");
    //     const authForm = document.getElementById("auth-form");

    //     // Fun√ß√£o para alternar entre login e cadastro
    //     function toggleAuthMode() {
    //         isLoginMode = !isLoginMode;
            
    //         if (isLoginMode) {
    //             formTitle.textContent = "Login";
    //             formAction.textContent = "Entrar";
    //             nameField.style.display = "none";
    //             phoneField.style.display = "none";
    //             termsCheckbox.required = false;
    //             termsCheckbox.closest('div').style.display = "none";
    //             toggleAuthBtn.textContent = "N√£o tem uma conta? Cadastre-se";
    //         } else {
    //             formTitle.textContent = "Cadastre-se";
    //             formAction.textContent = "Criar Conta";
    //             nameField.style.display = "block";
    //             phoneField.style.display = "block";
    //             termsCheckbox.required = true;
    //             termsCheckbox.closest('div').style.display = "flex";
    //             toggleAuthBtn.textContent = "J√° tem uma conta? Fa√ßa login";
    //         }
    //     }

    //     // Event listener para o bot√£o de alternar
    //     toggleAuthBtn.addEventListener("click", toggleAuthMode);

    //     // Manipulador √∫nico para o formul√°rio
    //     authForm.addEventListener("submit", async (e) => {
    //         e.preventDefault();
            
    //         const email = authForm.querySelector("input[type='email']").value;
    //         const password = authForm.querySelector("input[type='password']").value;
            
    //         try {
    //             if (isLoginMode) {
    //                 // Login
    //                 const userCredential = await auth.signInWithEmailAndPassword(email, password);
    //                 alert("Login realizado com sucesso!");
    //             } else {
    //                 // Cadastro
    //                 const name = authForm.querySelector("input[type='text']").value;
    //                 const userCredential = await auth.createUserWithEmailAndPassword(email, password);
    //                 await userCredential.user.updateProfile({ displayName: name });
    //                 alert("Cadastro realizado com sucesso!");
    //             }
    //             // Redirecionar ou atualizar a UI ap√≥s autentica√ß√£o bem-sucedida
    //         } catch (error) {
    //             alert(`Erro: ${error.message}`);
    //         }
    //     });
    // </script>
}

templ ScriptBodyODSList() {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const themeToggle = document.getElementById('theme-toggle');
            const html = document.documentElement;
            const odsContainer = document.getElementById('ods-container');
            const odsPopover = document.getElementById('ods-popover');
            const odsTitle = document.getElementById('ods-title');
            const odsDescription = document.getElementById('ods-description');

            // Tema
            themeToggle.addEventListener('click', () => {
                html.classList.toggle('dark');
                localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
            });

            if (localStorage.getItem('theme') === 'dark') html.classList.add('dark');

            // Gerar ODS
            odsList.forEach(ods => {
                const odsItem = document.createElement('div');
                odsItem.className = 'flex items-center justify-between p-2 rounded-lg bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600';
                odsItem.innerHTML = `
                    <label class="flex items-center gap-2 flex-1">
                        <input type="checkbox" name="ods" value="${ods.number}" 
                                class="w-4 h-4 border-golden rounded focus:ring-golden dark:bg-gray-900">
                        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
                            ${ods.emoji} ODS ${ods.number}
                        </span>
                    </label>
                    <button type="button" class="text-golden hover:text-golden/80 px-2 ods-info" 
                            data-number="${ods.number}">+</button>`;
                odsContainer.appendChild(odsItem);
            });

            // Popover ODS
            document.querySelectorAll('.ods-info').forEach(button => {
                button.addEventListener('click', (e) => {
                    const odsNumber = parseInt(e.target.dataset.number);
                    const ods = odsList.find(o => o.number === odsNumber);
                    
                    // Posicionar popover
                    const rect = e.target.getBoundingClientRect();
                    odsPopover.style.top = `${rect.top + window.scrollY}px`;
                    odsPopover.style.left = `${rect.left + rect.width + 10}px`;
                    
                    // Atualizar conte√∫do
                    odsTitle.textContent = ods.name;
                    odsDescription.textContent = ods.description;
                    odsPopover.classList.remove('hidden');
                });
            });

            // Fechar popover
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.ods-info') && !e.target.closest('#ods-popover')) {
                    odsPopover.classList.add('hidden');
                }
            });
        });
    </script>
}



templ ScriptGetCurrentYear() {
    <script>
        // Ano atual
        var years = document.getElementsByClassName("current-year");
        Array.from(years).forEach(year => {
            year.innerHTML = new Date().getFullYear();
        });
    </script>
}