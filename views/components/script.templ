package components

templ ScriptHead() {
    @ScriptHeadSource()
    @ScriptHeadTheme()
    @ScriptHeadTailwindConfig()
}

templ ScriptBody() {
    @ScriptBodySource()
    @ScriptBodyFirebase()
}

templ ScriptHeadSource() {
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@2.0.4"></script>

    <!-- Biblioteca para validação de e-mail -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/validator/13.11.0/validator.min.js"></script>
}

templ ScriptHeadTheme() {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
            const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
            const themeToggleBtn = document.getElementById('theme-toggle');

            // Verifica o tema salvo no localStorage ou a preferência do sistema
            if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                // Se o tema escuro estiver ativo, exibe o ícone da lua e oculta o ícone do sol
                document.documentElement.classList.add('dark');
                themeToggleDarkIcon.classList.remove('hidden');
                themeToggleLightIcon.classList.add('hidden');
            } else {
                // Se o tema claro estiver ativo, exibe o ícone do sol e oculta o ícone da lua
                document.documentElement.classList.remove('dark');
                themeToggleLightIcon.classList.remove('hidden');
                themeToggleDarkIcon.classList.add('hidden');
            }

            // Adiciona o evento de clique ao botão de alternância de tema
            themeToggleBtn.addEventListener('click', () => {
                // Alterna os ícones
                themeToggleDarkIcon.classList.toggle('hidden');
                themeToggleLightIcon.classList.toggle('hidden');

                // Alterna o tema
                if (document.documentElement.classList.contains('dark')) {
                document.documentElement.classList.remove('dark');
                localStorage.setItem('color-theme', 'light');
                } else {
                document.documentElement.classList.add('dark');
                localStorage.setItem('color-theme', 'dark');
                }
            });
        });
    </script>
}

templ ScriptHeadTailwindConfig() {
    <script>
        tailwind.config = {
          darkMode: 'class',
          theme: {
            extend: {
              colors: {
                // Cores primárias
                red: '#FF0000',    // Vermelho
                green: '#32CD32',  // Verde
                blue: '#00BFFF',   // Azul
                lilac: '#C8A2C8',  // Lilás
                pink: '#FF1493',   // Rosa
                orange: '#FF6F00', // Laranja
                golden: '#FFD700', // Ouro

                // Cores sucundárias
                brown: '#8B4513',  // Marrom
                teal: '#40E0D0',   // Turquesa
                silver: '#C0C0C0', // Prata
                copper: '#B87333', // Cobre
              }
            }
          }
        }
    </script>
}

templ ScriptHeadODSList() {
    <script>
        const odsList = [
            { number: 1, emoji: '🍽️', name: 'Erradicação da Pobreza', description: 'Acabar com a pobreza em todas as suas formas, em todos os lugares.' },
            { number: 2, emoji: '🌱', name: 'Fome Zero e Agricultura Sustentável', description: 'Acabar com a fome, alcançar a segurança alimentar e promover a agricultura sustentável.' },
            { number: 3, emoji: '💊', name: 'Saúde e Bem-Estar', description: 'Assegurar uma vida saudável e promover o bem-estar para todos.' },
            { number: 4, emoji: '📚', name: 'Educação de Qualidade', description: 'Garantir educação inclusiva e equitativa de qualidade.' },
            { number: 5, emoji: '👩‍❤️‍👨', name: 'Igualdade de Gênero', description: 'Alcançar a igualdade de gênero e empoderar todas as mulheres e meninas.' },
            { number: 6, emoji: '💧', name: 'Água Potável e Saneamento', description: 'Garantir disponibilidade e manejo sustentável da água.' },
            { number: 7, emoji: '⚡', name: 'Energia Limpa e Acessível', description: 'Garantir acesso à energia acessível, confiável e sustentável.' },
            { number: 8, emoji: '💼', name: 'Trabalho Decente e Crescimento Econômico', description: 'Promover o crescimento econômico sustentado e o trabalho decente.' },
            { number: 9, emoji: '🏭', name: 'Indústria, Inovação e Infraestrutura', description: 'Construir infraestrutura resiliente e promover a industrialização sustentável.' },
            { number: 10, emoji: '⚖️', name: 'Redução das Desigualdades', description: 'Reduzir a desigualdade dentro e entre os países.' },
            { number: 11, emoji: '🌆', name: 'Cidades e Comunidades Sustentáveis', description: 'Tornar as cidades e os assentamentos humanos inclusivos, seguros e sustentáveis.' },
            { number: 12, emoji: '♻️', name: 'Consumo e Produção Responsáveis', description: 'Garantir padrões de consumo e produção sustentáveis.' },
            { number: 13, emoji: '🌡️', name: 'Ação Contra a Mudança Global do Clima', description: 'Tomar medidas urgentes para combater a mudança climática.' },
            { number: 14, emoji: '🐟', name: 'Vida na Água', description: 'Conservar e usar de forma sustentável os oceanos e recursos marinhos.' },
            { number: 15, emoji: '🌳', name: 'Vida Terrestre', description: 'Proteger, restaurar e promover o uso sustentável dos ecossistemas terrestres.' },
            { number: 16, emoji: '🕊️', name: 'Paz, Justiça e Instituições Eficazes', description: 'Promover sociedades pacíficas e inclusivas para o desenvolvimento sustentável.' },
            { number: 17, emoji: '🤝', name: 'Parcerias e Meios de Implementação', description: 'Fortalecer os meios de implementação e revitalizar a parceria global.' }
        ];
    </script>
}

templ ScriptBodySource() {
    <!-- Importação do Flowbite.js via CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>
}

templ ScriptBodyFirebase() {
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js"></script>
    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U",
            authDomain: "weebie-go.firebaseapp.com",
            projectId: "weebie-go",
            storageBucket: "weebie-go.firebasestorage.app",
            messagingSenderId: "321509944065",
            appId: "1:321509944065:web:199a546b7055f461ec4900",
            measurementId: "G-S5CG0CLRVS"
        };

        // Inicialize o Firebase
        const app = firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();

        // Funções de Login e Cadastro
        document.getElementById("auth-form").addEventListener("submit", async (e) => {
            e.preventDefault();

            const email = document.querySelector("#auth-form input[type='email']").value;
            const password = document.querySelector("#auth-form input[type='password']").value;

            try {
                const userCredential = await auth.signInWithEmailAndPassword(email, password);
                const user = userCredential.user;
                alert("Login realizado com sucesso!");
                // Redirecione o usuário ou faça algo com o objeto `user`
            } catch (error) {
                alert("Erro ao fazer login: " + error.message);
            }
        });

        document.getElementById("toggle-auth").addEventListener("click", () => {
            const formTitle = document.getElementById("form-title");
            const formAction = document.getElementById("form-action");
            const nameField = document.getElementById("name-field");
            const phoneField = document.getElementById("phone-field");

            if (formTitle.textContent === "Login") {
                formTitle.textContent = "Cadastro";
                formAction.textContent = "Cadastrar";
                nameField.classList.remove("hidden");
                phoneField.classList.remove("hidden");
            } else {
                formTitle.textContent = "Login";
                formAction.textContent = "Entrar";
                nameField.classList.add("hidden");
                phoneField.classList.add("hidden");
            }
        });

        document.getElementById("auth-form").addEventListener("submit", async (e) => {
            e.preventDefault();

            const email = document.querySelector("#auth-form input[type='email']").value;
            const password = document.querySelector("#auth-form input[type='password']").value;
            const name = document.querySelector("#auth-form input[type='text']").value;

            try {
                const userCredential = await auth.createUserWithEmailAndPassword(email, password);
                const user = userCredential.user;
                await user.updateProfile({ displayName: name });
                alert("Cadastro realizado com sucesso!");
                // Redirecione o usuário ou faça algo com o objeto `user`
            } catch (error) {
                alert("Erro ao cadastrar: " + error.message);
            }
        });

        // Login com Google
        const googleProvider = new firebase.auth.GoogleAuthProvider();
        document.getElementById("google-signin").addEventListener("click", () => {
            auth.signInWithPopup(googleProvider)
                .then((result) => {
                    const user = result.user;
                    alert("Login com Google realizado com sucesso!");
                    // Redirecione o usuário ou faça algo com o objeto `user`
                })
                .catch((error) => {
                    alert("Erro ao fazer login com Google: " + error.message);
                });
        });

        // Login com Facebook
        const facebookProvider = new firebase.auth.FacebookAuthProvider();
        document.getElementById("facebook-signin").addEventListener("click", () => {
            auth.signInWithPopup(facebookProvider)
                .then((result) => {
                    const user = result.user;
                    alert("Login com Facebook realizado com sucesso!");
                    // Redirecione o usuário ou faça algo com o objeto `user`
                })
                .catch((error) => {
                    alert("Erro ao fazer login com Facebook: " + error.message);
                });
        });

        // Login com GitHub
        const githubProvider = new firebase.auth.GithubAuthProvider();
        document.getElementById("github-signin").addEventListener("click", () => {
            auth.signInWithPopup(githubProvider)
                .then((result) => {
                    const user = result.user;
                    alert("Login com GitHub realizado com sucesso!");
                    // Redirecione o usuário ou faça algo com o objeto `user`
                })
                .catch((error) => {
                    alert("Erro ao fazer login com GitHub: " + error.message);
                });
        });

        // Observador de Autenticação
        auth.onAuthStateChanged((user) => {
            if (user) {
                console.log("Usuário logado:", user);
                // Redirecione para a página principal ou faça algo com o objeto `user`
            } else {
                console.log("Usuário não logado");
            }
        });
    </script>
}


templ ScriptBodyODSList() {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const themeToggle = document.getElementById('theme-toggle');
            const html = document.documentElement;
            const odsContainer = document.getElementById('ods-container');
            const odsPopover = document.getElementById('ods-popover');
            const odsTitle = document.getElementById('ods-title');
            const odsDescription = document.getElementById('ods-description');

            // Tema
            themeToggle.addEventListener('click', () => {
                html.classList.toggle('dark');
                localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
            });

            if (localStorage.getItem('theme') === 'dark') html.classList.add('dark');

            // Gerar ODS
            odsList.forEach(ods => {
                const odsItem = document.createElement('div');
                odsItem.className = 'flex items-center justify-between p-2 rounded-lg bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600';
                odsItem.innerHTML = `
                    <label class="flex items-center gap-2 flex-1">
                        <input type="checkbox" name="ods" value="${ods.number}" 
                                class="w-4 h-4 border-golden rounded focus:ring-golden dark:bg-gray-900">
                        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
                            ${ods.emoji} ODS ${ods.number}
                        </span>
                    </label>
                    <button type="button" class="text-golden hover:text-golden/80 px-2 ods-info" 
                            data-number="${ods.number}">+</button>`;
                odsContainer.appendChild(odsItem);
            });

            // Popover ODS
            document.querySelectorAll('.ods-info').forEach(button => {
                button.addEventListener('click', (e) => {
                    const odsNumber = parseInt(e.target.dataset.number);
                    const ods = odsList.find(o => o.number === odsNumber);
                    
                    // Posicionar popover
                    const rect = e.target.getBoundingClientRect();
                    odsPopover.style.top = `${rect.top + window.scrollY}px`;
                    odsPopover.style.left = `${rect.left + rect.width + 10}px`;
                    
                    // Atualizar conteúdo
                    odsTitle.textContent = ods.name;
                    odsDescription.textContent = ods.description;
                    odsPopover.classList.remove('hidden');
                });
            });

            // Fechar popover
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.ods-info') && !e.target.closest('#ods-popover')) {
                    odsPopover.classList.add('hidden');
                }
            });
        });
    </script>
}



templ ScriptGetCurrentYear() {
    <script>
        // Ano atual
        var years = document.getElementsByClassName("current-year");
        Array.from(years).forEach(year => {
            year.innerHTML = new Date().getFullYear();
        });
    </script>
}