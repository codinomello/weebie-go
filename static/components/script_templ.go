// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func ScriptHead() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptHeadSource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptHeadTailwindConfig().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBody() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = ScriptBodyFirebase().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptBodyDarkMode().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ScriptBodySource().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadSource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><!-- HTMX --><script src=\"https://unpkg.com/htmx.org@2.0.4\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptHeadTailwindConfig() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\r\n        tailwind.config = {\r\n          darkMode: 'class',\r\n          theme: {\r\n            extend: {\r\n              colors: {\r\n                // Cores primárias\r\n                red: '#FF0000',    // Vermelho\r\n                green: '#32CD32',  // Verde\r\n                blue: '#00BFFF',   // Azul\r\n                lilac: '#C8A2C8',  // Lilás\r\n                pink: '#FF1493',   // Rosa\r\n                orange: '#FF6F00', // Laranja\r\n                golden: '#FFD700', // Ouro\r\n\r\n                // Cores sucundárias\r\n                brown: '#8B4513',  // Marrom\r\n                teal: '#40E0D0',   // Turquesa\r\n                silver: '#C0C0C0', // Prata\r\n                copper: '#B87333', // Cobre\r\n              }\r\n            }\r\n          }\r\n        }\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyFirebase() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\r\n        // Configuração do Firebase\r\n        const firebaseConfig = {\r\n            apiKey: \"AIzaSyAI0Tc7GssKwWwtVdrz6OaK6KFACx58N5U\",\r\n            authDomain: \"weebie-go.firebaseapp.com\",\r\n            projectId: \"weebie-go\",\r\n            storageBucket: \"weebie-go.firebasestorage.app\",\r\n            messagingSenderId: \"321509944065\",\r\n            appId: \"1:321509944065:web:199a546b7055f461ec4900\",\r\n            measurementId: \"G-S5CG0CLRVS\"\r\n        };\r\n\r\n        // Inicializar Firebase\r\n        firebase.initializeApp(firebaseConfig);\r\n        \r\n        // Referencias DOM\r\n        const loginButton = document.getElementById('login-button');\r\n        const logoutButton = document.getElementById('logout-button');\r\n        const userInfo = document.getElementById('user-info');\r\n        const loading = document.getElementById('loading');\r\n        const profilePic = document.getElementById('profile-picture');\r\n        const userName = document.getElementById('user-name');\r\n        const userEmail = document.getElementById('user-email');\r\n        const userId = document.getElementById('user-id');\r\n        \r\n        // Evento de login\r\n        loginButton.addEventListener('click', async () => {\r\n            try {\r\n                loading.style.display = 'block';\r\n                \r\n                const provider = new firebase.auth.GoogleAuthProvider();\r\n                const result = await firebase.auth().signInWithPopup(provider);\r\n                \r\n                // Usuário logado com sucesso\r\n                const user = result.user;\r\n                console.log(\"Usuário autenticado:\", user);\r\n                \r\n                // Obter token\r\n                const idToken = await user.getIdToken();\r\n                \r\n                // Enviar token para backend\r\n                await verifyWithBackend(idToken);\r\n            } catch (error) {\r\n                console.error(\"Erro de autenticação:\", error);\r\n                alert(`Erro ao fazer login: ${error.message}`);\r\n                loading.style.display = 'none';\r\n            }\r\n        });\r\n        \r\n        // Evento de logout\r\n        logoutButton.addEventListener('click', () => {\r\n            firebase.auth().signOut();\r\n            hideUserInfo();\r\n        });\r\n        \r\n        // Enviar token para o backend Go\r\n        async function verifyWithBackend(idToken) {\r\n            try {\r\n                const response = await fetch('/api/auth', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Authorization': `Bearer ${idToken}`,\r\n                        'Content-Type': 'application/json'\r\n                    }\r\n                });\r\n                \r\n                const data = await response.json();\r\n                \r\n                if (!response.ok) {\r\n                    throw new Error(data.error || 'Falha na autenticação com o backend');\r\n                }\r\n                \r\n                console.log(\"Autenticação verificada pelo backend:\", data);\r\n                \r\n                // Exibir informações do usuário\r\n                displayUserInfo(data);\r\n            } catch (error) {\r\n                console.error(\"Erro na verificação com backend:\", error);\r\n                alert(`Erro na verificação: ${error.message}`);\r\n            } finally {\r\n                loading.style.display = 'none';\r\n            }\r\n        }\r\n        \r\n        // Exibir informações do usuário\r\n        function displayUserInfo(userData) {\r\n            profilePic.src = userData.picture || '';\r\n            userName.textContent = userData.name || 'Usuário';\r\n            userEmail.textContent = userData.email || '';\r\n            userId.textContent = userData.uid || '';\r\n            \r\n            userInfo.style.display = 'block';\r\n            loginButton.style.display = 'none';\r\n        }\r\n        \r\n        // Esconder informações do usuário\r\n        function hideUserInfo() {\r\n            userInfo.style.display = 'none';\r\n            loginButton.style.display = 'block';\r\n        }\r\n        \r\n        // Verificar estado da autenticação quando a página carrega\r\n        firebase.auth().onAuthStateChanged(async (user) => {\r\n            if (user) {\r\n                try {\r\n                    loading.style.display = 'block';\r\n                    const idToken = await user.getIdToken();\r\n                    await verifyWithBackend(idToken);\r\n                } catch (error) {\r\n                    console.error(\"Erro ao verificar token:\", error);\r\n                    loading.style.display = 'none';\r\n                }\r\n            } else {\r\n                hideUserInfo();\r\n            }\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodyDarkMode() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<script>\r\n        document.addEventListener('DOMContentLoaded', () => {\r\n          const themeToggle = document.getElementById('theme-toggle');\r\n          const html = document.documentElement;\r\n          \r\n          // Verificar preferência salva\r\n          const savedTheme = localStorage.getItem('theme') || 'light';\r\n          html.classList.toggle('dark', savedTheme === 'dark');\r\n        \r\n          themeToggle.addEventListener('click', () => {\r\n            html.classList.toggle('dark');\r\n            localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');\r\n            updateThemeIcon();\r\n          });\r\n        \r\n          function updateThemeIcon() {\r\n            const isDark = html.classList.contains('dark');\r\n            themeToggle.querySelectorAll('svg').forEach(icon => {\r\n              icon.classList.toggle('hidden', isDark ? icon.getAttribute('fill') === '#fff' : icon.getAttribute('fill') !== '#fff');\r\n            });\r\n          }\r\n          updateThemeIcon();\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptBodySource() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Import do Firebase via CDN --><script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js\"></script><script src=\"https://www.gstatic.com/firebasejs/9.22.0/firebase-auth-compat.js\"></script><!-- Importação do Flowbite.js via CDN --><script src=\"https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js\"></script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ScriptGetCurrentYear() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<script>\r\n        // Ano atual\r\n        var years = document.getElementsByClassName(\"current-year\");\r\n        Array.from(years).forEach(year => {\r\n            year.innerHTML = new Date().getFullYear();\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
